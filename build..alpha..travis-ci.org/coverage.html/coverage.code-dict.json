{"/home/travis/build/npmtest/node-npmtest-gulp-vue-module/test.js":"/* istanbul instrument in package npmtest_gulp_vue_module */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-vue-module/lib.npmtest_gulp_vue_module.js":"/* istanbul instrument in package npmtest_gulp_vue_module */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_vue_module = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_vue_module = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-vue-module/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-vue-module && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_vue_module */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_vue_module\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_vue_module.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_vue_module.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_vue_module.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_vue_module.__dirname + '/lib.npmtest_gulp_vue_module.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-vue-module/node_modules/gulp-vue-module/index.js":"var fs          = require('fs');\nvar path        = require(\"path\");\nvar parse5      = require('parse5');\nvar gutil       = require('gulp-util');\nvar through     = require(\"through2\");\nvar sass        = require(\"node-sass\");\nvar PLUGIN_NAME = 'gulp-vue-module';\nvar LOG_PREFIX  = '[' + PLUGIN_NAME + '] ';\n\nfunction getAttribute (node, name) {\n    if (node.attrs) {\n        var i = node.attrs.length, attr;\n\n        while (i--) {\n            attr = node.attrs[i];\n            if (attr.name === name) {\n                return attr.value;\n            }\n        }\n    }\n}\n\nmodule.exports = function(options) {\n    var defaults = {\n        debug              : false,               // Debug mode\n        amd                : false,               // AMD style, Define module name and deps\n        define             : true,                // Using define() wrapper the module, false for Node.js (CommonJS style)\n        defineName         : false,               // Define the module name\n        indent             : '    ',              // Indent whitespace\n        headerComment      : true,                // Using <header-comment> Insert the header comments\n        templateReplaceTag : '__template__', // vue component template replace tag\n        loadCSSMethod      : 'require.loadCSS'    // define the load css method for require\n    };\n\n    var settings = Object.assign({}, defaults, options),\n        debug    = settings.debug,\n        indent   = settings.indent,\n        templateReplaceTag = settings.templateReplaceTag;\n    \n     return through.obj(function (file, encoding, callback) {\n        if (file.isNull()) {\n            return callback(null, file);\n        }\n\n        if (file.isStream()) {\n            this.emit('error', new gutil.PluginError(PLUGIN_NAME, 'Cannot use streamed files'));\n            return callback();\n        }\n\n        if (file.isBuffer()) {\n            if (debug) {\n                console.log(LOG_PREFIX, \"target =>\", file.path);\n            }\n            \n            var content  = file.contents.toString(encoding),\n                fragment = parse5.parseFragment(content, {\n                    locationInfo: true\n                });\n            \n            var tags     = {}, \n                contents = {\n                    script   : [],\n                    style    : [],\n                    template : []\n                },\n                moduleName      = '',\n                moduleDeps      = '',\n                headerComment   = '',\n                includeFileName,\n                scriptEmpty     = false,\n                componentTags   = ['template', 'style', 'script'];\n            \n            fragment.childNodes.forEach(function (node) {\n                var type = node.tagName;\n                var lang = getAttribute(node, 'lang');\n                var href = getAttribute(node, 'href');\n                var src  = getAttribute(node, 'src');\n                \n                if (type === \"header-comment\") {\n                    headerComment = parse5.serialize(node);\n                }\n                \n                if (componentTags.indexOf(type) >= 0) {\n                    tags[type] = true;\n                    \n                    if (type === \"style\") {\n                        var style = parse5.serialize(node);\n                        \n                        if (!lang || lang === \"css\") {\n                            style.split(\"\\n\").forEach(function(line){\n                                if (line) contents.style.push(line.trim());\n                            });\n                            \n                            style = contents.style.join(\"\");\n                            \n                            if (style != \"\") {\n                                contents.style = '{content : \"' + style + '\"}';\n                            }\n\n                            if (href && href !== \"\") {\n                                contents.style = '{url : \"' + href + '\"}';\n                            }\n                        }\n                        else if (lang && (lang === \"sass\" || lang === \"scss\")) {\n                            contents.style = [];\n\n                            style.split(\"\\n\").forEach(function(line){\n                                if (line) contents.style.push(line);\n                            });\n                            \n                            var result,\n                                sassRenderOptions = {\n                                    outputStyle    : \"compressed\",\n                                    indentedSyntax : (lang === \"sass\") ? true : false,\n                                };\n\n                            if (href) {\n                                sassRenderOptions.file = href;\n                            } else {\n                                sassRenderOptions.data = contents.style.join(\"\\n\");\n                            }\n\n                            result = sass.renderSync(sassRenderOptions);\n                            result = result.css.toString().replace(\"\\n\", \"\");\n\n                            if (result !== \"\") {\n                                contents.style = '{content : \"' + result + '\"}';\n                            }\n                        }\n                    }\n                    \n                    if (type === \"template\") {\n                        includeFileName = getAttribute(node, 'include');\n                        \n                        if (includeFileName) {\n                            var tpl = fs.readFileSync(includeFileName, 'utf-8');\n                            \n                            if (!tpl) {\n                                console.error(LOG_PREFIX, \"read template file error =>\", includeFileName);\n                            }\n                        } else {\n                            var treeAdapter = parse5.treeAdapters.default,\n                                docFragment = treeAdapter.createDocumentFragment();\n\n                            treeAdapter.appendChild(docFragment, node);\n\n                            var tpl = parse5.serialize(docFragment);\n                            tpl = tpl.replace('<template>', '').replace('</template>', '');\n                        }\n                            \n                        tpl.split(\"\\n\").forEach(function(line){\n                            if (line) contents.template.push(line.trim());\n                        });\n\n                        contents.template = contents.template.join(\"\").toString().replace(/'/g, \"&#39;\");\n                    }\n                    \n                    if (type === \"script\") {\n                        moduleName  = getAttribute(node, 'module-name');\n                        moduleDeps  = getAttribute(node, 'module-deps');\n\n                        var script = parse5.serialize(node);\n                        \n                        if (script.split(\"\\n\").length <= 2) {\n                            scriptEmpty = true;\n                            script      = indent + \"module.exports = {\\n\" + indent + indent + \"template : '\" + templateReplaceTag + \"'\\n\" + indent + \"};\\n\";\n                        }\n                        \n                        script.split(\"\\n\").forEach(function(line){\n                            if (line.trim() != \"\") {\n                                line = line.replace(new RegExp(templateReplaceTag, \"gi\"), contents.template);\n                                contents.script.push(line);\n                            }\n                        });\n                    }\n                }\n            });\n            \n            if (settings.headerComment) {\n                headerComment = headerComment.replace(\"\\n\", '');\n            } else {\n                headerComment = '';\n            }\n            \n            var script        = contents.script.join(\"\\n\"), \n                deps          = '', \n                loadCSS       = '', \n                defineName    = '',\n                moduleContent = '';\n            \n            if (typeof contents.style === \"string\" && contents.style != \"\") {\n                loadCSS = indent + settings.loadCSSMethod + '('+contents.style+');\\n\\n';\n            }\n            \n            if (settings.defineName && moduleName) {\n                defineName = '\"' + moduleName + '\", ';\n            }\n            \n            if (settings.amd && moduleDeps) {\n                deps = [];\n\n                moduleDeps.split(/\\s*,\\s*/).forEach(function(dep){\n                    deps.push('\"' + dep + '\"');\n                });\n                \n                deps = \"[\" + deps.join(\", \") + \"], \";\n            }\n            \n            if (settings.define) {\n                moduleContent = 'define(' + defineName + deps + 'function(require, exports, module) {\\n' + loadCSS + script+'\\n});';\n            } else {\n                moduleContent = script;\n            }\n\n            script = headerComment + moduleContent;\n            \n            content = script;\n            \n            if (!tags.script || !tags.template) {\n                this.emit('error', new gutil.PluginError(PLUGIN_NAME, file.path + ' not vue component file, not have script and template tag'));\n                return callback();\n            }\n\n            file.contents = new Buffer(content);\n        }\n        \n        callback(null, file);\n    });\n}"}